// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  role          UserRole
  phoneNumber   String?
  address       String?
  dateOfBirth   DateTime?
  profileImage  String?
  isActive      Boolean   @default(true)
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Role-specific relations
  admin         Admin?  //? means optional/nullable [one]
  lawyer        Lawyer?
  client        Client?
  staff         Staff?

  @@map("users")
}

enum UserRole {
  ADMIN
  LAWYER
  CLIENT
  STAFF
}

model Department {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  code        String    @unique
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  admins      Admin[] //means many to one relation [department has many admins]
  staff       Staff[]

  @@map("departments")
}

model Admin {
  id            String    @id @default(uuid())
  
  userId        String    @unique
  
  departmentId  String
  permissions   String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  department    Department @relation(fields: [departmentId], references: [id])

  @@map("admins")
}

model Lawyer {
  id            String    @id @default(uuid())
 
  userId        String    @unique
  specialization String[]
  barNumber     String    @unique
  experience    Int       // in years
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt


   user          User      @relation(fields: [userId], references: [id])
   cases         Case[]    @relation("LawyerCases")
   appointments  Appointment[] @relation("LawyerAppointments")

  @@map("lawyers")
}

model Client {
  id            String    @id @default(uuid())
  userId        String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  cases         Case[]    @relation("ClientCases")
  appointments  Appointment[] @relation("ClientAppointments")

  @@map("clients")
}

model Staff {
  id            String    @id @default(uuid())
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @unique
  department    Department @relation(fields: [departmentId], references: [id])
  departmentId  String
  position      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("staff")
}

model Case {
  id          String    @id @default(uuid())
  title       String
  description String
  status      CaseStatus @default(OPEN)
  client      Client    @relation("ClientCases", fields: [clientId], references: [id])
  clientId    String
  lawyer      Lawyer    @relation("LawyerCases", fields: [lawyerId], references: [id])
  lawyerId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("cases")
}

enum CaseStatus {
  OPEN
  IN_PROGRESS
  CLOSED
  PENDING
}

model Appointment {
  id          String    @id @default(uuid())
  date        DateTime
  description String?
  client      Client    @relation("ClientAppointments", fields: [clientId], references: [id])
  clientId    String
  lawyer      Lawyer    @relation("LawyerAppointments", fields: [lawyerId], references: [id])
  lawyerId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("appointments")
}
